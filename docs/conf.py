#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""energy_fault_detector documentation build configuration file.

created by ``sphinx-quickstart`` on Fri Feb  9 13:32:39 2018 and heavily modified.

This file is execfile()d with the current directory set to its containing dir.

Note that not all possible configuration values are present in this autogenerated file.

All configuration values have a default; values that are commented out serve to show the default.

If extensions (or modules to document with autodoc) are in another directory,
add these directories to sys.path here. If the directory is relative to the documentation root,
use os.path.abspath to make it absolute, like shown here.

"""
import os
import sys
sys.path.insert(0, os.path.abspath('..'))

IMPORT_NAME = 'energy_fault_detector'  # name used for imports

# Add the path of our module to the import searchpath (uncomment to use)
# import sys
# sys.path.insert(0, os.path.abspath('..'))

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'<name>': ('https://docs.python.org/', None)}

add_module_names = False

autodoc_mock_imports = ["sklearn"]

autoclass_content = 'both'

# ======================================================================================
# No configurable options below this line


# current version etc. -----------------------------------------------------------------
HERE = os.path.dirname(__file__)
with open(os.path.join(HERE, '..', IMPORT_NAME, 'VERSION'), 'r') as f:
    version = f.readlines()[0].strip()

with open(os.path.join(HERE, '..', IMPORT_NAME, 'ABOUT'), 'r') as f:
    lines = f.readlines()
    key_value_pairs = [line.replace('\n', '').split('=') for line in lines]
    about = {key: val.strip() for key, val in key_value_pairs}

# -- General configuration -------------------------------------------------------------
# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',  # generate docs from docstrings
    'sphinx.ext.napoleon',  # does some formatting tricks
    'sphinx_autodoc_typehints',  # package needs to be installed
    # 'sphinx.ext.doctest',  # if you want to use doctests somehow
    'sphinx.ext.imgmath',  # render latex graphics
    'sphinx.ext.intersphinx',  # links to other (energy_fault_detector) packages
    'sphinx.ext.coverage',  # documentation coverage (not test coverage)
    'sphinx_copybutton',  # add copy button to code blocks
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = about['title']
copyright = about['copyright']
author = ', '.join(about['author'])

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short deviations.Y version.
# Get current version from the version file
# The full version, including alpha/beta/rc tags.
release = version  # (we don't use any such tags)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todoList` produce output, else they produce nothing.
todo_include_todos = False
autodoc_warningiserror = False  # Some warnings can happen

# -- Options for Napoleon extension ---------------------------------------
# Allow Google style docstrings, but disallow Numpy style docstrings.
# For the sake of consistency it is a good idea not to mix those.
napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_favicon = '_static/favicon.ico'
html_logo = '_static/logo.png'

# These paths are either relative to html_static_path
# or fully qualified paths (eg. https://...)
html_css_files = [
    'custom.css',
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        # 'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------
# Output file base name for HTML help builder.
htmlhelp_basename = 'pydoc'


# -- Options for LaTeX output ---------------------------------------------
latex_elements = {}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [(
    master_doc,
    IMPORT_NAME + '.tex',
    about['title'] + ' Documentation',
    ', '.join(about['author']), 'manual'
)]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(
    master_doc,
    IMPORT_NAME,
    about['title'] + ' Documentation',
    about['author'], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, about['title'], about['title']+ ' Documentation',
     about['author'], about['title'], about['description'],
     'Miscellaneous'),
]
